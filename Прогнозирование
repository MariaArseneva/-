{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2daf23f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите путь к файлу (без кавычек) C:\\\\pyt_files\\\\example.csv\n",
      "[[219, 47294], [606, 365408], [20, 330], [587, 342798], [823, 674850], [602, 360588], [354, 124244], [873, 759500], [364, 131394], [787, 616998], [22, 408], [453, 203840], [445, 196680], [856, 730158], [131, 16758], [513, 261620], [644, 412794], [421, 175968], [54, 2744], [99, 9494], [823, 674850], [403, 161190], [237, 55448], [375, 139490], [26, 588], [846, 713168], [81, 6308], [764, 581394], [802, 640788], [984, 965294], [533, 282480], [133, 17280], [306, 92708], [748, 557250], [740, 545370], [399, 157994], [272, 73158], [979, 955494], [421, 175968], [886, 782328], [193, 36660], [805, 645600], [227, 50838], [997, 991008], [24, 494], [400, 158790], [221, 48168], [59, 3294], [415, 170970], [279, 76994], [811, 655278], [774, 596744], [32, 918], [874, 761244], [542, 292128], [146, 20868], [814, 660144], [931, 863958], [679, 458994], [802, 640788], [132, 17018], [997, 991008], [382, 144768], [219, 47294], [7, 18], [583, 338130], [39, 1394], [313, 97020], [250, 61740], [233, 53580]]\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "road = str(input('Введите путь к файлу (без кавычек) '))\n",
    "with open(road, encoding='utf-8') as r_file:\n",
    "    file_reader = csv.reader(r_file, delimiter = \";\",quoting=csv.QUOTE_NONE)\n",
    "    l=[]\n",
    "    for i in file_reader:\n",
    "        #print(i)\n",
    "        l.append(i)\n",
    "for i in l:\n",
    "    i[0]=int(i[0])\n",
    "    i[1]=int(i[1])\n",
    "print(l)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7f5d68e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "200\n",
      "[651, 657, 399, 963, 240, 191, 503, 495, 63, 255, 920, 528, 394, 725, 671, 821, 796, 516, 883, 556, 636, 900, 837, 966, 246, 349, 846, 331, 512, 272, 33, 786, 147, 46, 185, 814, 521, 420, 718, 826, 758, 972, 770, 363, 135, 262, 309, 766, 887, 194, 583, 498, 739, 933, 426, 492, 661, 383, 409, 244, 237, 17, 586, 745, 340, 897, 959, 616, 765, 291, 850, 172, 603, 790, 782, 96, 634, 305, 949, 721, 550, 830, 73, 988, 255, 813, 160, 574, 251, 989, 562, 932, 414, 180, 200, 140, 255, 832, 883, 406, 579, 509, 307, 716, 736, 9, 865, 343, 195, 653, 763, 300, 456, 640, 528, 195, 709, 577, 353, 447, 663, 22, 350, 892, 848, 791, 46, 193, 45, 378, 914, 979, 640, 464, 533, 296, 906, 935, 992, 489, 412, 438, 117, 782, 474, 257, 285, 820, 44, 264, 869, 125, 471, 381, 854, 478, 537, 892, 166, 61, 795, 597, 746, 434, 917, 613, 932, 887, 907, 925, 842, 847, 685, 246, 626, 806, 876, 622, 750, 144, 774, 636, 366, 12, 179, 270, 919, 723, 738, 924, 559, 236, 113, 830, 879, 828, 966, 495, 142, 474]\n",
      "[421838, 429668, 157994, 924470, 56870, 35898, 251490, 243530, 3770, 64250, 843630, 277190, 154044, 523440, 448218, 671568, 631218, 264698, 777030, 307458, 402578, 807290, 698048, 930248, 59768, 120744, 713168, 108558, 260598, 73158, 980, 615428, 21158, 1968, 33660, 660144, 269868, 175130, 513360, 679788, 572280, 941858, 590580, 130670, 17810, 67848, 94544, 584448, 784098, 37044, 338130, 246500, 543894, 867680, 180188, 240578, 434928, 145530, 166044, 58794, 55448, 228, 341628, 552780, 114570, 801908, 916794, 377598, 582920, 83798, 719940, 29058, 361790, 621720, 609168, 8918, 400044, 92100, 897744, 517668, 300840, 686400, 5100, 973170, 64250, 658520, 25110, 327744, 62238, 975144, 314148, 865818, 170144, 31850, 39390, 19170, 64250, 689718, 777030, 163608, 333494, 257544, 93318, 510498, 539478, 44, 745620, 116610, 37430, 424440, 579870, 89090, 206558, 407670, 277190, 37430, 500544, 331188, 123540, 198458, 437570, 408, 121440, 792978, 716550, 623298, 1968, 36660, 1880, 141740, 832644, 955494, 407670, 213894, 282480, 86718, 818108, 871410, 981078, 237644, 168498, 190520, 13328, 609168, 223244, 65268, 80360, 669930, 1794, 68894, 752544, 15240, 220418, 144008, 726744, 227040, 286748, 792978, 27048, 3528, 629630, 354608, 554268, 187044, 838128, 373920, 865818, 784098, 819918, 852840, 706428, 714858, 467160, 59768, 389988, 647208, 764738, 385008, 560240, 20294, 596744, 402578, 132848, 98, 31494, 72080, 841794, 520550, 542420, 850994, 310794, 54978, 12420, 686400, 769994, 683090, 930248, 243530, 19728, 223244]\n",
      "Теоретическое значение коэффициента k =  -2687.055325182909\n",
      "Теоретическое значение коэффициента b =  1845989.866616323\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "N = len(l) # число экспериментов\n",
    "k = 2\n",
    "b = 3\n",
    "\n",
    "print(N)\n",
    "\n",
    "f = np.array([k*z+b for z in range(N*10)])\n",
    "\n",
    "\n",
    "x = []\n",
    "y = []\n",
    "for i in l:\n",
    "    x.append(i[0])\n",
    "    y.append(i[1])\n",
    "print(x)\n",
    "print(y)\n",
    "\n",
    "x = np.array(x)\n",
    "y = np.array(y)\n",
    "\n",
    "# вычисляем коэффициенты\n",
    "mx = x.sum()/N\n",
    "my = y.sum()/N\n",
    "a2 = np.dot(x.T, x)/N\n",
    "a11 = np.dot(x.T, y)/N\n",
    "\n",
    "kk = (a11 - mx*my)/(a2 - mx**2)\n",
    "bb = my - kk*mx\n",
    "ff = np.array([kk*z+bb for z in range(N*15)])\n",
    "\n",
    "print('Теоретическое значение коэффициента k = ',kk)\n",
    "print('Теоретическое значение коэффициента b = ',bb)\n",
    "\n",
    "plt.scatter(x, y, s=2, c='red')\n",
    "plt.plot(f, c = 'green')\n",
    "plt.plot(ff, c='blue')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3f789d12",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for ** or pow(): 'list' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-32-3eb85a2bb5e3>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     25\u001b[0m \u001b[0mbeta\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     26\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 27\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmy_quadratic_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'Original'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     28\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'o'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'Data'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     29\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbeta0\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mbeta1\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mxx\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mbeta2\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mxx\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'Restored'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-32-3eb85a2bb5e3>\u001b[0m in \u001b[0;36mmy_quadratic_function\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mscipy\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mlinalg\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mmy_quadratic_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m2\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mx\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m10\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mxx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for ** or pow(): 'list' and 'int'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from scipy import linalg\n",
    "def my_quadratic_function(x):\n",
    "    return x**2 - 3*x - 10\n",
    "\n",
    "xx = []\n",
    "yy = []\n",
    "for i in l:\n",
    "    xx.append(i[0])\n",
    "    yy.append(i[1])\n",
    "    \n",
    "plt.scatter(xx, yy)\n",
    "\n",
    "m = len(l)\n",
    "x = np.random.rand(m)\n",
    "y = my_quadratic_function(x) + 0.05*np.random.randn(m)\n",
    "\n",
    "plt.plot(x, y, 'o')\n",
    "X = np.stack((np.ones(m), x, x**2)).T\n",
    "beta, _, _, _ = linalg.lstsq(X, y)\n",
    "beta0, beta1, beta2 = beta\n",
    "beta\n",
    "\n",
    "plt.plot(xx, my_quadratic_function(xx), label = 'Original')\n",
    "plt.plot(x, y, 'o', label = 'Data')\n",
    "plt.plot(xx, beta0 + beta1*xx + beta2*xx**2, label = 'Restored')\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "\n",
    "beta = np.polyfit(x, y, 2)\n",
    "beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e8082d87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a=1.0\n",
      "b=-3.000000000000033\n",
      "c=-9.999999999993888\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "import numpy as np\n",
    "import math\n",
    "\n",
    "x = []\n",
    "y = []\n",
    "for i in l:\n",
    "    x.append(i[0])\n",
    "    y.append(i[1])\n",
    "    \n",
    "xx = np.array(x)\n",
    "yy = np.array(y)\n",
    "\n",
    "#квадратная функция (парабола)\n",
    "def my_quadratic_function(x,a,b,c):\n",
    "    return a*x**2 + b*x + c #a=1, b=-3, c=-10\n",
    "\n",
    "#полуокружность\n",
    "def half_circle(x,R):\n",
    "    c = R**2 - x**2\n",
    "    d = math.sqrt(c)\n",
    "    return d #R=1150\n",
    "\n",
    "popt, pcov = curve_fit(my_quadratic_function, xx, yy)    \n",
    "a,b,c = popt\n",
    "\n",
    "print('a={0}\\nb={1}\\nc={2}'.format(*tuple(popt)))\n",
    "\n",
    "#print('R={0}'.format(*tuple(popt)))\n",
    "\n",
    "plt.scatter(xx,yy,s=30,color='red')\n",
    "plt.plot(xx, my_quadratic_function(xx, *popt))\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c378d7bc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
